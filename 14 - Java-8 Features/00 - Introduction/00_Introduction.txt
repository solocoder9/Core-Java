Introduction to Java 8
----------------------
- Java 8, released in March 2014, introduced significant enhancements and features that 
  transformed the way Java is used, making it more efficient and expressive. 

Key Features
~~~~~~~~~~~~
1. Lambda Expressions:
    - These provide a clear and concise way to represent a single method interface using
      an expression, making it easier to pass behavior as parameters.

2. Functional Interfaces:
    - Java 8 introduces functional interfaces; interfaces that contain a single abstract 
      method; enabling the use of lambda expressions and method references. 
    - This promotes a cleaner, more expressive approach to coding.

3. Streams API:
    - This new abstraction revolutionizes the way we handle collections.
    - Streams allow for processing sequences of elements in a functional manner, supporting
      operations like filtering, mapping, and reducing, all while improving code readability
      and maintainability.

4. Default and Static Methods in Interfaces:
    - Java 8 allows interfaces to include default methods with implementation.
    - This feature provides greater flexibility in interrace design, allowing developers to 
      add new methods to existing interfaces without breaking backward compatibility.

5. Optional Class:
    - Introduced to address the common pitfalls of null references, the 'Optional' class 
      provides a container for optional values, reducing the risk of 'NullPointerException's
      and promoting more robust come.

6. New Date and Time API:
    - The 'java.time' package brings a comprehensive and user-friendly approach to date and 
      time manipulation, resolving many limitations of the old Date and Calender classes.

7. Nashorn JavaScript Engine:
    - This lightweight engine enables developers to execute JavaScript code directly within 
      Java applications, enhancing the language's versatility.

8. CompletableFuture:
    - Enhancing Java's concurrency capabilities, 'CompletableFuture' offers a more flexible 
      way to handle asynchronous programming, allowing for easier composition of asynchronous
      tasks.

