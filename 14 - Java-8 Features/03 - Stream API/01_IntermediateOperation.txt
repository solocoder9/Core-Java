01 - Intermediate Operations
----------------------------
- Intermediate operations are operations that transform a stream into another stream.
- These operations are lazy, meaning they are not executed until a terminal operations is 
  invoked.
- They allow you to build a pipeline of operation, and the stream will be processed only 
  when the terminal operations is invoked.

● Characteristics:
~~~~~~~~~~~~~~~~~
- They return a new stream.
- They are lazy and are not executed immediately. 
- They can be chained together. 

● Common Intermediate Operations:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
○ filter():
    - Filters elements based on a condition (predicate).
    - Example:
        Stream<Integer> numbers = Stream.of(1, 2, 3, 4, 5);
        Stream<Integer> evenNumbers = numbers.filter(n -> n % 2 == 0);
        evenNumbers.forEach(System.out::println);  // Prints 2, 4

○ map():
    - Transforms each element in the stream using a provided function.
    - Example:
        Stream<String> names = Stream.of("Alice", "Bob", "Charlie");
        Stream<String> upperCaseNames = names.map(String::toUpperCase);
        upperCaseNames.forEach(System.out::println);  // Prints ALICE, BOB, CHARLIE

○ flatMap():
    - Flattens a nested stream into a single stream.
    - Example:
        Stream<List<String>> listStream = Stream.of(Arrays.asList("A", "B"), Arrays.asList("C", "D"));
        listStream.flatMap(List::stream).forEach(System.out::println);  // Prints A, B, C, D

○ distinct():
    - Removes duplicate elements from the stream.
    - Example:  
        Stream<Integer> numbers = Stream.of(1, 2, 3, 2, 1);
        numbers.distinct().forEach(System.out::println);  // Prints 1, 2, 3

○ sorted():
    - Sorts the elements in a natural order using a comparator.
    - Example:
        Stream<Integer> numbers = Stream.of(3, 1, 4, 1, 5);
        numbers.sorted().forEach(System.out::println);  // Prints 1, 1, 3, 4, 5
